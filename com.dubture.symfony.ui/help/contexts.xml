<?xml version="1.0" encoding="UTF-8"?>
<contexts>
   <context id="newproject_firstpage" title="New Symfony wizard |Â Basic settings">
      <description>Select the name and location for your new Symfony project. You can either create the project in your Eclipse workspace, or inside the Documentroot of your default server. 

If you haven&apos;t set the Local Web Root for your Default PHP Server, click on the &quot;Configure now&quot; link on the left to open the preference page.

Creating your project in the DocumentRoot of your local webserver is recommended, as the Wizard will be able to automatically create a Launch configuration for you so you can start debugging using XDebug right away.</description>
      <topic href="http://wiki.eclipse.org/Debugging_using_XDebug" label="Debugging using XDebug"/>
      <topic href="http://xdebug.org/" label="XDebug"/>
      <topic href="http://www.phptherightway.com/#xdebug" label="PHP the right way"/>
   </context>
   <context id="newproject_secondpage" title="Composer values for your Symfony project">
      <description>The Symfony Standard Edition comes with a default composer.json containing values you probably want to override for your project.

By filling values on this page, your composer.json values of your project will be customized.</description>
   </context>
   <context id="import_firstpage" title="Importing an existing Symfony project">
      <description>This wizard helps you to import existing Symfony projects into your Eclipse workspace. 

After selecting the location of your existing project, the wizard will scan the project for a dumped service container and a console script.

The dumped service container is used to parse the services in your project and provide type inference for your services in your PHP code.

The console script is needed to execute Symfony console commands.</description>
   </context>
   <context id="symfony_preferences" title="General Symfony preferences">
      <description>The Symfony plugin validates xml files containing service declarations. If a service class does not exist, it will provide a validation marker. This marker has a quick-fix attached to it, which will allow you to create the missing class automatically.

The Validation dropdown on the left allows you to specify the type of severity of the marker being set.

You can set this to &quot;Ignore&quot; to disable validation.</description>
      <topic href="http://symfony.com/doc/current/book/service_container.html" label="Symfony Service Container"/>
   </context>
   <context id="symfony_services_preference">
      <description>Some Symfony services are instantiated during runtime. These services are called &quot;synthetic&quot; and cannot be inferred from reading your service descriptions.

To allow type inference for synthetic services, you can specify the Service ID and the associated PHP class in the dialog on the left.</description>
   </context>
   <context id="symfony_property_page" title="Symfony project properties">
      <description>To provide type inference for your Symfony services, Eclipse needs to parse your service definitions. This is done by reading the dumped service container, which is created automatically by Symfony.

When you create a new Symfony project, the path to the dumped container is set automatically, but you can choose a custom container path by changing the container path on the left.</description>
      <topic href="http://symfony.com/doc/current/components/dependency_injection/compilation.html" label="Symfony Dependency Injection"/>
   </context>
   <context id="symfony_launcher" title="Symfony console configuration">
      <description>This page allows you to select the PHP executable and the console script which will be used to launch Symfony commands from within Eclipse.</description>
      <topic href="http://symfony.com/doc/2.0/components/console/introduction.html" label="The Symfony Console Component"/>
   </context>
</contexts>
